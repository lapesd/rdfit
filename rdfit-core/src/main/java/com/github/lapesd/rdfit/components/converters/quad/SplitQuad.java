/*
 *    Copyright 2021 Alexis Armin Huf
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

package com.github.lapesd.rdfit.components.converters.quad;

import javax.annotation.Nonnull;
import java.util.Objects;

/**
 * Pair-like data structure that represents a graph and a triple.
 * This should be generated by a function compatible with the {@link QuadSplitter} interface
 */
public class SplitQuad {
    private final @Nonnull String graph;
    private final @Nonnull Object triple;

    /**
     * Create from a graph IRI and a triple
     * @param graph an graph IRI or blank node representation
     * @param triple a triple
     */
    public SplitQuad(@Nonnull String graph, @Nonnull Object triple) {
        this.graph = graph;
        this.triple = triple;
    }

    /**
     * Get the graph IRI or blank node representation
     * @return the graph
     */
    public @Nonnull String getGraph() {
        return graph;
    }

    /**
     * Get the triple
     * @return the triple instance
     */
    public @Nonnull Object getTriple() {
        return triple;
    }

    @Override public String toString() {
        return String.format("(%s, %s)", getGraph(), getTriple());
    }

    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof SplitQuad)) return false;
        SplitQuad splitQuad = (SplitQuad) o;
        return getGraph().equals(splitQuad.getGraph()) && getTriple().equals(splitQuad.getTriple());
    }

    @Override public int hashCode() {
        return Objects.hash(getGraph(), getTriple());
    }
}
